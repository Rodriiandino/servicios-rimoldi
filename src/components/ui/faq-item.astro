---
interface Props {
  question: string
  answer: string
  id: string
}

const { question, answer, id } = Astro.props
---

<div
  class='faq-item w-full rounded-10px overflow-hidden'
  id={id}
  itemscope
  itemprop='mainEntity'
  itemtype='https://schema.org/Question'
>
  <button
    class='w-full flex justify-between items-center gap-4 p-6 bg-main-color transition-colors duration-300 group'
    aria-expanded='false'
    aria-controls={`answer-${id}`}
  >
    <h4
      class='font-noto text-third-color text-left text-xs md:text-0 group-hover:text-second-color transition-colors duration-300'
      itemprop='name'
    >
      {question}
    </h4>
    <svg
      xmlns='http://www.w3.org/2000/svg'
      class='w-5 h-5 text-third-color transition-all duration-300 group-hover:text-second-color'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      stroke-width='2'
      stroke-linecap='round'
      stroke-linejoin='round'
    >
      <path d='M6 9l6 6 6-6'></path>
    </svg>
  </button>

  <div
    class='answer-container h-0 overflow-hidden transition-all duration-300 ease-in-out'
    id={`answer-${id}`}
    role='region'
    aria-labelledby={id}
    itemscope
    itemprop='acceptedAnswer'
    itemtype='https://schema.org/Answer'
  >
    <p
      class='px-6 py-4 bg-main-color text-third-color/90 text-xxs md:text-xs'
      itemprop='text'
    >
      {answer}
    </p>
  </div>
</div>

<style>
  .faq-item {
    transition: box-shadow 0.3s ease;
  }

  .faq-item:hover {
    box-shadow: 0 4px 6px -1px rgba(248, 251, 250, 0.05);
  }

  .faq-item button[aria-expanded='true'] svg {
    transform: rotate(180deg);
    color: var(--second-color);
  }

  .faq-item button[aria-expanded='true'] h4 {
    color: var(--second-color);
  }

  @media (prefers-reduced-motion: reduce) {
    .faq-item,
    .answer-container,
    svg {
      transition: none;
    }
  }
</style>

<script>
  const initializeFAQ = () => {
    const faqItems = document.querySelectorAll('.faq-item')

    faqItems.forEach(item => {
      const button = item.querySelector('button')
      const answerContainer = item.querySelector(
        '.answer-container'
      ) as HTMLElement
      const answer = answerContainer?.querySelector('p')

      if (!button || !answerContainer || !answer) return

      const toggleAnswer = (isExpanding: boolean, currentItem: HTMLElement) => {
        const btn = currentItem.querySelector('button')
        const ansContainer = currentItem.querySelector(
          '.answer-container'
        ) as HTMLElement
        const ans = ansContainer?.querySelector('p')

        if (!btn || !ansContainer || !ans) return

        btn.setAttribute('aria-expanded', isExpanding.toString())

        if (isExpanding) {
          ansContainer.style.height = `${ans.offsetHeight}px`
        } else {
          ansContainer.style.height = '0px'
        }
      }

      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true'

        faqItems.forEach(otherItem => {
          if (otherItem !== item) {
            const otherButton = otherItem.querySelector('button')
            if (otherButton?.getAttribute('aria-expanded') === 'true') {
              toggleAnswer(false, otherItem as HTMLElement)
            }
          }
        })

        toggleAnswer(!isExpanded, item as HTMLElement)
      })

      window.addEventListener('resize', () => {
        if (button.getAttribute('aria-expanded') === 'true') {
          answerContainer.style.height = `${answer.offsetHeight}px`
        }
      })
    })
  }

  document.addEventListener('astro:page-load', initializeFAQ)
</script>
