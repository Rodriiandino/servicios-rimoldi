---
import SEO from '@components/SEO.astro'
import Footer from '@components/ui/footer.astro'
import Header from '@components/ui/header.astro'
import '@fontsource-variable/noto-sans'
import { ClientRouter } from 'astro:transitions'

interface Props {
  title: string
  description: string
  canonical?: string
  image?: string
}
const { title, description, canonical, image } = Astro.props
---

<script>
  document.addEventListener('astro:page-load', () => {
    const animations = [
      {
        selector: '#fade-in-up',
        animationClass: 'animate-fade-up',
        threshold: 0.1,
        rootMargin: '0px 0px 100px 0px'
      },
      {
        selector: '#fade-in-right',
        animationClass: 'animate-fade-right',
        threshold: 0.1
      },
      {
        selector: '#fade-in-left',
        animationClass: 'animate-fade-left',
        threshold: 0.1
      },
      {
        selector: '#fade-in-down',
        animationClass: 'animate-fade-down',
        threshold: 0.1
      },
      {
        selector: '#fade-in',
        animationClass: 'animate-fade',
        threshold: 0.1
      }
    ]

    const isMobile = window.matchMedia('(max-width: 768px)').matches

    function initializeAnimations() {
      animations.forEach(animationConfig => {
        const { selector, animationClass, threshold, rootMargin } =
          animationConfig

        const observer = new IntersectionObserver(
          entries => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const element = entry.target as HTMLElement
                const baseDelay = 70

                const delay = element.dataset.index
                  ? Number(element.dataset.index) * baseDelay
                  : 0

                setTimeout(
                  () => {
                    element.classList.add(animationClass)
                    element.classList.remove('opacity-0')
                  },
                  isMobile ? 0 : delay
                )

                observer.unobserve(element)
              }
            })
          },
          {
            threshold,
            rootMargin
          }
        )

        document.querySelectorAll(selector).forEach(element => {
          observer.observe(element)
        })
      })
    }

    initializeAnimations()
  })

  document.addEventListener('astro:page-load', () => {
    function animateCount(
      element: HTMLElement,
      targetNumber: number,
      duration = 2000
    ) {
      let start = 0
      const stepTime = Math.abs(Math.floor(duration / targetNumber))
      const step = targetNumber > 1000 ? 100 : 1
      const interval = setInterval(() => {
        start += step
        element.textContent = start.toString()

        if (start >= targetNumber) {
          clearInterval(interval)
          element.textContent = targetNumber.toString()
        }
      }, stepTime)
    }

    const observer = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement
            const targetNumber = parseInt(
              element.getAttribute('data-target') || '0',
              10
            )

            animateCount(element, targetNumber)

            observer.unobserve(element)
          }
        })
      },
      {
        threshold: 0.5
      }
    )

    document.querySelectorAll('.count-up').forEach(element => {
      observer.observe(element)
    })
  })

  document.addEventListener('astro:page-load', () => {
    const initializeSingleFAQ = (item: Element) => {
      const button = item.querySelector('button')
      const answerContainer = item.querySelector(
        '.answer-container'
      ) as HTMLElement
      const answer = answerContainer?.querySelector('p')
      console.log('button')

      if (!button || !answerContainer || !answer) return

      const updateHeight = () => {
        if (button.getAttribute('aria-expanded') === 'true') {
          answerContainer.style.height = `${answer.offsetHeight}px`
        }
      }

      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true'

        document.querySelectorAll('.faq-item').forEach(otherItem => {
          if (otherItem !== item) {
            const otherButton = otherItem.querySelector('button')
            const otherContainer = otherItem.querySelector(
              '.answer-container'
            ) as HTMLElement
            if (otherButton?.getAttribute('aria-expanded') === 'true') {
              otherButton.setAttribute('aria-expanded', 'false')
              otherContainer.style.height = '0px'
            }
          }
        })

        button.setAttribute('aria-expanded', (!isExpanded).toString())
        answerContainer.style.height = isExpanded
          ? '0px'
          : `${answer.offsetHeight}px`
      })

      window.addEventListener('resize', updateHeight)
    }

    const faqItems = document.querySelectorAll('.faq-item')
    faqItems.forEach(initializeSingleFAQ)
  })

  document.addEventListener('astro:page-load', () => {
    const descriptions = [
      'Especialistas en nivelaciones de terrenos y calles para proyectos de construcción.',
      'Compactaciones con maquinaria avanzada, garantizando estabilidad y calidad.',
      'Desmontes, extracción de árboles y limpieza de terrenos sin complicaciones.',
      'Pilotajes y perforaciones para estructuras seguras y confiables.',
      'Más de 40 años de experiencia en excavaciones, nivelaciones y compactaciones para proyectos de construcción de cualquier envergadura.'
    ]

    class AnimatedDescription {
      container: HTMLElement
      descriptions: string[]
      currentIndex: number
      paragraph: HTMLParagraphElement | null
      isAnimating: boolean
      prefersReducedMotion: boolean

      constructor(container: HTMLElement, descriptions: string[]) {
        this.container = container
        this.descriptions = descriptions
        this.currentIndex = 0
        this.paragraph = container.querySelector('p')
        this.isAnimating = false

        this.prefersReducedMotion = window.matchMedia(
          '(prefers-reduced-motion: reduce)'
        ).matches

        this.init()
      }

      init() {
        if (this.paragraph) {
          this.paragraph.textContent = this.descriptions[0]
          if (!this.prefersReducedMotion) {
            this.paragraph.classList.add('fade-in-text')
            this.startAnimation()
          }
        }
      }

      async animateText() {
        if (this.isAnimating || this.prefersReducedMotion) return
        this.isAnimating = true

        if (!this.paragraph) return
        this.paragraph.classList.remove('fade-in-text')
        this.paragraph.classList.add('fade-out-text')

        await new Promise(resolve => setTimeout(resolve, 500))

        this.currentIndex = (this.currentIndex + 1) % this.descriptions.length
        this.paragraph.textContent = this.descriptions[this.currentIndex]

        this.paragraph.classList.remove('fade-out-text')
        this.paragraph.classList.add('fade-in-text')

        this.isAnimating = false
      }

      startAnimation() {
        if (!this.prefersReducedMotion) {
          setInterval(() => this.animateText(), 5000)
        }
      }
    }

    const container = document.getElementById('animated-description')
    if (container) {
      setTimeout(() => {
        new AnimatedDescription(container, descriptions)
      }, 5000)
    }
  })
</script>

<html lang='es'>
  <head>
    <ClientRouter />
    <SEO
      title={title}
      description={description}
      canonical={canonical}
      image={image}
    />
    <script
      defer
      src='https://cloud.umami.is/script.js'
      data-website-id='3ced5c19-fd38-4031-89e0-c4269a0bcc4d'></script>
    <link
      rel='preload'
      as='image'
      href='/images/hero.webp'
      media='(min-width: 1281px)'
    />
    <link
      rel='preload'
      as='image'
      href='/images/hero-tablet.webp'
      media='(max-width: 1280px) and (min-width: 721px)'
    />
    <link
      rel='preload'
      as='image'
      href='/images/hero-mobile.webp'
      media='(max-width: 720px)'
    />
  </head>
  <body>
    <Header />
    <slot />
    <Footer />

    <style is:global>
      :root {
        --main-color: #050505;
        --second-color: #f1961c;
        --third-color: #f8fbfa;
        --fourth-color: #777777;
        --fifth-color: #0a0a0a;
        --background-color: #050505;

        --max-width: calc(1250px + 4rem);
        --padding-side: 2rem;
        --border-radius: 0.625rem;

        --step--2: clamp(0.7813rem, 0.7747rem + 0.0326vw, 0.8rem);
        --step--1: clamp(0.9375rem, 0.9158rem + 0.1087vw, 1rem);
        --step-0: clamp(1.125rem, 1.0815rem + 0.2174vw, 1.25rem);
        --step-1: clamp(1.35rem, 1.2761rem + 0.3696vw, 1.5625rem);
        --step-2: clamp(1.62rem, 1.5041rem + 0.5793vw, 1.9531rem);
        --step-3: clamp(1.944rem, 1.771rem + 0.8651vw, 2.4414rem);
        --step-4: clamp(2.3328rem, 2.0827rem + 1.2504vw, 3.0518rem);
        --step-5: clamp(2.7994rem, 2.4462rem + 1.7658vw, 3.8147rem);
      }

      @font-face {
        font-family: 'quicksilver';
        src:
          url('/fonts/quicksilver_400-webfont.woff2') format('woff2'),
          url('/fonts/quicksilver_400-webfont.woff') format('woff');
        font-display: swap;
        font-weight: normal;
        font-style: normal;
      }

      *,
      *:before,
      *:after {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }

      html {
        scroll-behavior: smooth;
        overflow-x: hidden;
        font-size: 16px;
      }

      body {
        width: 100%;
        font-family: 'Noto Sans Variable', sans-serif;
        background-color: var(--background-color);
      }

      body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('/images/background-effect.svg');
        background-repeat: repeat;
        z-index: -1;
        opacity: 0.2;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      main {
        width: 100%;
        display: flex;
        position: relative;
        flex-direction: column;
        align-items: center;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        text-wrap: balance;
        color: var(--second-color);
        font-family: 'quicksilver', sans-serif;
      }

      p {
        text-wrap: pretty;
        color: var(--third-color);
      }

      a {
        color: var(--third-color);
        text-decoration: none;
      }

      ul {
        list-style: none;
      }

      ::-webkit-scrollbar {
        width: 10px;
      }
      ::-webkit-scrollbar-thumb {
        background-color: var(--second-color);
        border-radius: 10px;
      }

      ::-webkit-scrollbar-track {
        background-color: var(--background-color);
      }

      ::-webkit-search-cancel-button {
        -webkit-appearance: none;
      }

      @media screen and (max-width: 500px) {
        :root {
          --padding-side: 1rem;
        }
      }
    </style>
  </body>
</html>
